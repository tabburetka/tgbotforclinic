import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from settings import TOKEN, ADMIN
from questions import questions
import re


bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (–¥–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–æ—Ç–æ)
class Form(StatesGroup):
    waiting_for_fio = State()
    waiting_for_phone = State()
    waiting_for_photo = State()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
user_sessions = {}  # {user_id: {'answers': list, 'last_activity': datetime}}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ
photo_selection_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì∑ –ü—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="with_photo")],
    [InlineKeyboardButton(text="‚û°Ô∏è –ë–µ–∑ —Ñ–æ—Ç–æ", callback_data="without_photo")]
])

cancel_photo_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ", callback_data="cancel_photo")]
])

async def cleanup_sessions():
    """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
    while True:
        now = datetime.now()
        expired_users = [
            user_id for user_id, session in user_sessions.items()
            if now - session['last_activity'] > timedelta(minutes=30)
        ]
        for user_id in expired_users:
            del user_sessions[user_id]
        await asyncio.sleep(60 * 5)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

def update_user_activity(user_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_sessions:
        user_sessions[user_id] = {'answers': [], 'last_activity': datetime.now()}
    else:
        user_sessions[user_id]['last_activity'] = datetime.now()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="test_button"),
        InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É", callback_data="scenario_selection")
    ],
])

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    update_user_activity(message.from_user.id)
    name = message.from_user.first_name
    await message.reply(f"""{name}, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üåø

–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ ¬´–§–∞–π–±–µ—Ä –ö–ª–∏–Ω–∏–∫¬ª ‚Äî –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö –∑–¥–æ—Ä–æ–≤—å—è –≤–µ–Ω. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∫ —Ñ–ª–µ–±–æ–ª–æ–≥—É, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, –ª–µ—á–µ–Ω–∏—è –≤–∞—Ä–∏–∫–æ–∑–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤–µ–Ω –∏ —Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –∑–≤–µ–∑–¥–æ—á–µ–∫.

–ë—É–¥–µ–º —Ä–∞–¥—ã –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –æ–Ω–ª–∞–π–Ω –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –æ—á–Ω—ã–π –ø—Ä–∏–µ–º –≤—Ä–∞—á–∞-—Ñ–ª–µ–±–æ–ª–æ–≥–∞!

–í–∞—à –∫–æ–º—Ñ–æ—Ä—Ç –∏ –∑–¥–æ—Ä–æ–≤—å–µ ‚Äî –Ω–∞—à–∞ –≥–ª–∞–≤–Ω–∞—è –∑–∞–±–æ—Ç–∞.""",
    reply_markup=main_keyboard)

def pluralize_answers(count: int) -> str:
    if count % 10 == 1 and count % 100 != 11:
        return f"{count} –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"
    elif 2 <= count % 10 <= 4 and (count % 100 < 10 or count % 100 >= 20):
        return f"{count} –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞"
    else:
        return f"{count} –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"

async def send_question(user_id: int, message: types.Message, question_num: int = 0):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
    update_user_activity(user_id)
    
    after_the_test_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É", callback_data="scenario_selection"),
            InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ],
    ])
    
    if question_num >= len(questions):
        answers = user_sessions.get(user_id, {}).get('answers', [])
        count_yes = answers.count(0)  # –°—á–∏—Ç–∞–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (0,1 - –∏–Ω–¥–µ–∫—Å "–î–∞")
        count_yes += answers.count(1)
        
        if count_yes == 0:
            text = "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º - —É –í–∞—Å –∑–¥–æ—Ä–æ–≤—ã–µ –Ω–æ–≥–∏! –ï—Å–ª–∏ –í–∞—Å –≤—Å–µ –µ—â–µ —á—Ç–æ-—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç, –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∫ —Ñ–ª–µ–±–æ–ª–æ–≥—É"
        else:
            text = f"–£ –≤–∞—Å {pluralize_answers(count_yes)}, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ñ–ª–µ–±–æ–ª–æ–≥—É –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π"
        
        await message.edit_text(text, reply_markup=after_the_test_keyboard)
        
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        if user_id in user_sessions:
            del user_sessions[user_id]
        return
    
    question_data = questions[question_num]
    question_text = f"–í–æ–ø—Ä–æ—Å ‚Ññ{question_num + 1}\n\n" + question_data[1][0]
    
    buttons = []
    for i, answer in enumerate(question_data[2:]):
        buttons.append([InlineKeyboardButton(
            text=answer[0],
            callback_data=f"answer_{question_num}_{i}"
        )])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    if question_num == 0:
        await message.answer(question_text, reply_markup=keyboard)
    else:
        await message.edit_text(question_text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "test_button")
async def start_test(callback: types.CallbackQuery):
    """–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
    await callback.message.delete()
    user_id = callback.from_user.id
    user_sessions[user_id] = {'answers': [], 'last_activity': datetime.now()}
    await send_question(user_id, callback.message)

@dp.callback_query(lambda c: c.data.startswith("answer_"))
async def process_answer(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
    user_id = callback.from_user.id
    
    if user_id not in user_sessions:
        user_sessions[user_id] = {'answers': [], 'last_activity': datetime.now()}
    
    parts = callback.data.split('_')
    question_num = int(parts[1])
    answer_num = int(parts[2])
    
    user_sessions[user_id]['answers'].append(answer_num)
    user_sessions[user_id]['last_activity'] = datetime.now()
    await send_question(user_id, callback.message, question_num + 1)

@dp.callback_query(lambda c: c.data == "main_menu")
async def back_to_main_menu(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
    
    user_id = callback.from_user.id
    if user_id in user_sessions:
        del user_sessions[user_id]  # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é
    await send_welcome(callback.message)
    await callback.message.delete()

@dp.callback_query(lambda c: c.data == "scenario_selection")
async def select(callback: types.CallbackQuery):
    """–í—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è –∑–∞–ø–∏—Å–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
    update_user_activity(callback.from_user.id)
    scenario_selection_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–¢–µ–ª–µ–≥—Ä–∞–º –∑–∞—è–≤–∫–∞", callback_data="sign_up_to_doctor_tg"),
            InlineKeyboardButton(text="–°–∞–π—Ç", url="https://booking.medflex.ru/?user=80ba62d9fd0740c0e6c147cef0ff6b60&isRoundWidget=true&filial=8995&type=doctors")
        ],
    ])
    await callback.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ, –≥–¥–µ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è.",
        reply_markup=scenario_selection_keyboard
    )

@dp.callback_query(lambda c: c.data == "sign_up_to_doctor_tg")
async def leave_a_request(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∑–∞—è–≤–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
    personal_data_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)", callback_data = "agreement"),
            InlineKeyboardButton(text="–ü–æ–ª–∏—Ç–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", url="https://18470-o-fayber.lp5.s1dev.ru/soglasie-na-obrabotku-personalnykh-dannykh")
        ],
    ])
    await callback.message.answer(
        "–î–ª—è –∑–∞–ø–∏—Å–∏ —É–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ*:\n\n"
        "1. –§–ò–û\n"
        "2. –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "3. –§–æ—Ç–æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –∑–æ–Ω—ã (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)\n\n"
        "*–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–∏–º–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏*",
        reply_markup=personal_data_keyboard
    )

@dp.callback_query(lambda c: c.data == "agreement")
async def agreement_button_check(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Form.waiting_for_fio)
    await callback.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ!\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –§–ò–û")


@dp.message(Form.waiting_for_fio)
async def process_fio(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
    normalized_fio = ' '.join(message.text.split())
    
    if is_valid_fullname(normalized_fio):
        await state.update_data(full_name=normalized_fio)
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "+7XXX XXX XX XX\n"
            "–∏–ª–∏\n"
            "8XXX XXX XX XX"
        )
        await state.set_state(Form.waiting_for_phone)
    else:
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ:\n\n"
            "‚Ä¢ –§–∞–º–∏–ª–∏, –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
            "‚Ä¢ –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã\n"
            "‚Ä¢ –¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –¥–µ—Ñ–∏—Å—ã\n\n"
            "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –∏–ª–∏ –ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞-–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–Ω–∞"
        )

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ñ–æ—Ç–æ
@dp.message(Form.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    if is_russian_phone_number(message.text):
        await state.update_data(phone=message.text)
        await message.answer(
            "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –∑–æ–Ω—ã?",
            reply_markup=photo_selection_keyboard
        )
        await state.set_state(Form.waiting_for_photo)
    else:
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "+7XXX XXX XX XX\n"
            "–∏–ª–∏\n"
            "8XXX XXX XX XX\n\n"
            "–î–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Å–∫–æ–±–∫–∏ –∏ –¥–µ—Ñ–∏—Å—ã: +7 (XXX) XXX-XX-XX"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ
@dp.callback_query(Form.waiting_for_photo, lambda c: c.data == "with_photo")
async def request_photo(callback: types.CallbackQuery):
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –∑–æ–Ω—ã:",
        reply_markup=cancel_photo_keyboard
    )
    await callback.answer()

@dp.callback_query(Form.waiting_for_photo, lambda c: c.data == "without_photo")
async def continue_without_photo(callback: types.CallbackQuery, state: FSMContext):
    
    await complete_application(callback.message, state)
    await callback.answer()

@dp.callback_query(Form.waiting_for_photo, lambda c: c.data == "cancel_photo")
async def cancel_photo_upload(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞ –±–µ–∑ —Ñ–æ—Ç–æ!")
    await complete_application(callback.message, state)
    await callback.answer()

@dp.message(Form.waiting_for_photo)
async def handle_photo(message: types.Message, state: FSMContext):
    if message.photo[-1].file_size > 10 * 1024 * 1024:  # 10MB limit
        await message.answer(
            "–§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–º–∞–∫—Å–∏–º—É–º 10–ú–ë). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª:",
            reply_markup=cancel_photo_keyboard
        )
        return
    
    await state.update_data(photo=message.photo[-1].file_id)
    await complete_application(message, state)

@dp.message(Form.waiting_for_photo)
async def handle_invalid_content(message: types.Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –∑–æ–Ω—ã –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=photo_selection_keyboard
    )

async def complete_application(message: types.Message, state: FSMContext):
    data = await state.get_data()
    text = (
        f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å!\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {data['full_name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n\n"
        f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}"
    )
    
    if 'photo' in data:
        await bot.send_photo(
            ADMIN,
            photo=data['photo'],
            caption=text,
            reply_markup=—Åheck_done_keyboard
        )
    else:
        await bot.send_message(
            ADMIN,
            text=f"{text}\n\nüì∑ –§–æ—Ç–æ –Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–æ",
            reply_markup=—Åheck_done_keyboard
        )
    
    await message.answer(
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
        "–ù–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )
    await state.clear()

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
—Åheck_done_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚ùå–ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π‚ùå", callback_data="check_done")],
])

done_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚úÖ–ü–æ–º–µ—á–µ–Ω–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ‚úÖ", callback_data="reverb_done_button")],
])

@dp.callback_query(lambda c: c.data == "check_done")
async def Check_done_F(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=done_keyboard)

@dp.callback_query(lambda c: c.data == "reverb_done_button")
async def Reverb_check_done_F(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=—Åheck_done_keyboard)

def is_valid_fullname(name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –§–ò–û —Å —É—á–µ—Ç–æ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤"""
    cleaned_name = ' '.join(name.split())  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
    pattern = r'^[–ê-–Ø–Å][–∞-—è—ë\-]{1,}(?:\s[–ê-–Ø–Å][–∞-—è—ë\-]{1,}){1,2}$'
    return bool(re.fullmatch(pattern, cleaned_name))

def is_russian_phone_number(phone):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    pattern = r'^(\+7|8)[\s\-]?\(?\d{3}\)?[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}$'
    return bool(re.fullmatch(pattern, phone))

async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏
    asyncio.create_task(cleanup_sessions())
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
